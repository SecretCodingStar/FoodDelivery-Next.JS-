// Code generated by go-bindata.
// sources:
// data/ingredient_corpus.txt
// data/ingredient_densities.json
// data/top_5k.txt
// DO NOT EDIT!

package meanrecipe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIngredient_corpusTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x56\xcb\x96\xec\x28\x0e\xdc\xeb\x2b\x58\xcd\x6e\x66\xce\x3c\xbb\xfb\x73\x64\xac\xb4\xb9\x06\xc4\x91\x20\xf3\xfa\x7e\x7d\x1f\xf1\xc8\xac\xea\x4d\x9d\x02\x93\x42\x8a\x08\x85\xf0\x27\x97\x42\xbb\xd3\x18\x3c\xed\x6e\xef\x7f\x7d\xab\xce\x63\xce\xb6\x5f\x83\xbf\xd4\xf1\xa3\x6f\x86\x5c\xd9\x95\x40\x9e\x14\x5a\x56\x8c\xb5\x9f\x2e\xae\x12\x6a\x61\xce\x4e\xdb\x81\xe2\x1e\x91\x9b\x38\x3a\x0e\xf7\xc4\x1c\x62\x44\x47\x07\x1d\xea\x4a\xc8\xfe\x84\x1d\xf5\x74\x11\xe5\x20\xe7\x19\x45\xc9\x3d\x42\x26\xa7\xe1\x61\xe1\x36\xe1\x8b\xf2\xdf\x5b\x71\x16\xdf\x55\x2d\xae\x6e\x5a\x1c\x70\x88\x8e\x4b\x0d\x9c\x31\x3a\xfa\x59\x05\x7d\x75\x1b\x66\xcc\xe8\x12\xea\x49\xfb\x0c\xaa\x09\x63\x74\x18\x23\x58\xdc\x78\x03\x3d\xb1\xb0\xa0\x45\x4f\x21\x5e\x90\xc8\x12\x87\x96\x5f\x82\x56\x3d\xd8\x4d\xd0\x53\x87\xad\xd5\x4a\x02\x07\x4a\x0c\x1e\x5e\x68\x0b\x8e\xe1\x49\x8e\x43\x84\xfe\xf3\x5e\x1d\x70\x0e\x9c\xa1\x50\x29\x34\x17\x0a\x5b\x44\x7f\xb9\xb9\xb7\x09\xbf\x26\x20\x40\xc7\xa1\xe0\x43\xce\x98\x38\xc3\x86\x57\xc8\x87\x2b\xfc\xda\x49\x20\x52\xe2\xec\x7e\xb4\xe0\x09\x2a\x27\xac\x4c\x0a\x13\x37\x28\x28\x1a\xe9\x5e\x3f\x51\xde\x11\xd4\xc0\xf5\x42\x98\xe0\x49\x07\x55\xdc\xe2\xc8\xce\x53\x24\xb9\xe1\x08\xf9\x58\x71\xa1\x9f\x73\xfe\x24\x52\x02\x8f\x22\x5c\x15\xfc\x49\xfb\x8e\xb2\xb6\x37\xa2\x07\x14\xae\xe3\x6a\x8b\x74\x72\xa6\x1b\x72\xab\x89\x0e\x98\xa7\x94\x6f\xa7\xd8\x3c\x41\xc2\x9b\x73\xc6\x60\x11\xcf\xe0\x2f\xca\xc6\x5a\x3d\x81\x85\x0e\xcc\x0c\xbe\xa5\x90\xa1\x9e\x77\xa2\x89\xe4\x2a\xb6\x73\x8a\x79\x5f\x20\xa5\xa6\xa7\x30\x27\x43\x27\x62\xae\xc2\xb0\xa1\x86\x08\x85\x3c\x1a\xa2\xe8\x39\xc3\x49\xf8\xbc\x67\xc9\x9f\x1b\x09\xb5\x2a\xbc\x58\x3c\x69\x25\xd1\x33\x08\xcd\x0c\x0b\x16\x09\x17\x82\x3f\xd9\x73\xc4\xfa\x4e\x14\x5e\x18\x73\xeb\x10\x84\x18\x56\x56\x18\x13\xe7\x5d\x21\x86\x44\x93\x89\x82\x92\x48\x31\x2f\x8c\x4a\xc8\x84\xa5\x44\x02\xb1\xcf\x2c\x98\x8f\x75\xf6\x10\xa2\xbc\x2a\x12\x0c\x1a\xb2\x82\x67\xcf\xb9\x55\xf0\x78\x53\xce\xb4\x3e\xf7\xcb\xf7\xf0\x83\xb3\x4b\x4d\x2b\xca\x0e\x9e\x25\xdb\x7f\xfe\x84\xf4\x0b\x85\xac\x5f\x16\x33\x5d\x8d\x5d\x75\xcf\x90\xc9\xa4\xd4\x93\x50\x10\x7a\x63\x38\x44\x33\x2b\x37\x58\x76\xe7\xa5\xa5\x4d\x81\xb1\x2a\x68\x09\x19\xfd\x09\x7a\xb2\x54\xca\x21\x1f\x5f\x7e\xec\x1e\x11\x2f\x52\xd0\x13\x63\x34\x69\xcc\x60\x05\xb5\x52\x3f\xb7\x51\x8c\xeb\x26\xc3\x07\xf4\x94\x90\x0a\x28\x25\x8e\x21\x23\xfc\x6a\xde\x9f\x21\x07\xd0\x2a\xf8\xda\x48\x24\x58\x7e\xac\x94\x50\x6e\xf0\x98\x39\x62\xd7\xe7\xc0\x69\xf5\x4a\xef\x5c\x05\xf5\x18\x63\xdf\xf1\x91\x9f\xa4\xf0\x86\x65\x12\xad\x95\xfd\x65\x2b\xfb\xf8\x3a\x43\x29\xd6\x09\x43\x0c\xbd\x5a\x48\x58\x22\x39\xbd\xa5\x95\x49\x4c\xc7\xd4\x4d\x50\x37\x8c\x8a\x29\x78\xb7\x20\xdc\xe5\x76\xaf\x33\x54\x72\xaf\x90\xfb\xd9\x80\xd9\x74\xb0\xe1\xed\x22\xe1\x03\x2e\xaa\xfe\x6c\x05\x6e\x3e\x9a\xd4\x8e\x83\x1d\x7d\x47\xc0\x27\x7b\xdc\x19\x94\x14\xd3\x6c\x3e\xdc\x36\x3c\x68\xc5\xb0\x64\x37\x61\xef\x39\x86\x8f\xea\xbf\x19\xc4\x77\x25\x77\xc1\xe0\x6c\xd1\xd1\x04\x2b\x4e\x47\x6c\x69\xd5\x37\xdf\xd2\x46\x02\x85\x30\xb7\xea\xa6\x61\x61\x8c\x5a\x4c\x8c\x56\xdc\x1b\x42\xc1\xbc\x08\x49\x21\x57\x38\x31\x4d\x16\xbe\xd2\xba\xc5\x46\xeb\x58\x77\x98\x42\xa8\xe0\x9b\xc8\xfd\xbe\x95\x25\x2f\x49\x0f\x13\x8d\x54\xab\x09\x6e\x00\x39\x23\x4d\x3c\x94\x68\x57\x28\x2c\x17\xd4\x26\x89\x24\x78\x30\x45\x21\xec\x21\x46\xb8\x29\x46\x7e\x0d\x21\xc0\x17\x22\x0c\xe6\xb1\xf9\x03\x23\x16\xca\xec\x7a\x9b\x92\x4e\x1b\xe3\x87\x5b\x86\xe1\x94\x5b\x81\x8d\xcc\x24\x46\xfb\xae\x99\x30\x5d\x78\x7c\x9a\xee\xd3\x0d\x7e\x00\x66\x4e\xb3\x93\xbc\xa9\x1c\xf7\xaf\x55\x42\x39\x50\x2c\x99\x05\x93\x45\x19\x62\x4b\x1c\x51\xd5\x92\xe1\xfc\x20\x6f\x93\x88\x44\xa7\xc3\x97\x96\xca\x15\x3e\x18\x99\x24\x46\x47\xd6\x26\x17\xdd\x70\x77\x92\xfb\x28\xd1\x29\xcf\x2e\x58\x35\xd1\x98\xa7\xbc\x73\x10\xd4\xb2\xe8\x30\x6b\x9e\xe6\xda\x45\xf4\xb7\xb7\xcd\x04\xcf\xb5\xbe\x8d\x42\x4d\xe3\xb3\x79\x47\x57\x4c\x0b\xd0\x22\x78\xbf\xcd\x75\x29\x6a\x8e\x95\xb5\xec\x9e\xe2\xbe\xe3\xe2\xb1\x90\x58\x02\x1f\x9d\x1c\x14\xb1\x86\x3c\xa1\x59\xd4\x0c\xb8\x67\x61\x0f\xfa\x92\xd3\x2b\xa8\xbe\x47\xcf\x49\x26\xa7\xf7\x80\x1b\xe3\x66\xb6\xab\x01\xc2\xd1\x7a\xb2\x7c\x98\xae\x28\x15\x87\xf2\x12\x61\xfc\x38\xf0\x74\xdd\x50\x31\x06\xcc\x4e\x09\x95\xbb\xad\xf5\x3b\xba\x5a\xb0\xc5\xf0\x88\xfc\x22\xf9\xa2\xaf\xaf\x94\xf7\x47\xcf\xa0\x75\x18\x6a\xa7\x0a\xb5\xa0\xe0\xd1\x74\xcc\xae\x05\x8f\x76\x81\x59\x8e\x7d\x08\x8f\x6e\xef\xae\x3e\xde\x02\xae\xb2\x54\x1b\xd7\x0a\x3b\x56\x52\x88\x44\x97\x42\x69\x62\xd9\x0e\x45\x7f\xf1\xbe\xde\x8a\x2b\xf6\x2e\xa4\x6a\xc9\xeb\x15\xd2\xe8\x2c\xc6\xda\x0b\x4e\x98\x0f\x86\x43\xf0\xb4\x09\x2e\xe8\x2f\x92\xe5\xec\x8f\xa0\xe7\x9a\x75\xc3\x07\x2c\xab\xe5\x53\xd0\xb5\x61\xef\xab\xb7\x3a\x70\xef\x27\xc6\x24\xfd\x8b\x8b\xd6\x96\x71\xc0\x60\x92\xed\x82\x5c\xef\x36\xd3\xe5\x9c\xbb\xb3\xfa\x21\x28\x3a\x8e\x62\x92\x82\x12\x5b\xfa\xb0\x5a\x51\x04\x0f\xb6\xd9\x2f\xcd\x32\xf3\x27\x29\x1c\x8c\x75\xa5\x62\xcc\x5d\x61\xcf\x74\xaf\xde\xb2\x19\xbb\x38\x7f\x7b\xbe\x35\xf7\x5a\xd4\x33\x1c\xa7\x4d\xa6\x47\x1b\x8d\xf3\x81\xbb\x1f\xe9\x6e\xf5\x79\x09\x8d\x6e\x19\x6f\xa1\xee\x44\x6b\xb8\x8d\x01\x03\xdf\xee\xd0\x82\xc7\x49\xb5\x86\xf9\x0c\x2b\x44\xf1\xdb\x33\xae\x0f\x67\x88\xc7\x3f\x26\x77\xd3\xbb\x3c\x5e\xe4\x52\xf8\x39\xc7\x18\xfc\x0b\xfe\x0d\xff\x81\xff\xc2\xff\xe0\xff\xf0\x1b\xfc\x0e\x7f\xc0\x3f\xff\x0c\x00\x00\xff\xff\xd4\xff\xcb\xb8\x5b\x0b\x00\x00")

func dataIngredient_corpusTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataIngredient_corpusTxt,
		"data/ingredient_corpus.txt",
	)
}

func dataIngredient_corpusTxt() (*asset, error) {
	bytes, err := dataIngredient_corpusTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ingredient_corpus.txt", size: 2907, mode: os.FileMode(436), modTime: time.Unix(1523087669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIngredient_densitiesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x57\xdb\xb2\xa3\x3a\x0e\x7d\x3f\x5f\x41\xed\xe7\xae\x14\xd7\x90\xf4\xdf\x08\xa3\x80\x27\xc6\x66\x7c\xd9\xa9\xf4\xd4\xfc\xfb\x29\xdb\x92\x21\xdd\xfd\xba\x90\x65\x59\x5a\x5a\x12\xff\xfb\xa7\xaa\xbe\xa6\xe0\x3d\xda\xaf\x9f\x55\xdb\x8e\x97\xfa\x47\x82\x54\xc0\x4a\xac\x88\x0e\xbf\x7e\x56\x4d\x37\x10\x7e\x40\x7d\x7f\x19\x19\x9a\x67\xb0\x27\xeb\xf1\xce\xd6\xc6\x7b\x58\x4e\x8e\xda\xe6\x7a\xe9\xf2\x27\x8b\xb0\x9d\x3e\x74\x23\x7d\x78\xa0\x87\x93\xaf\xa1\x26\x5f\x3b\xd8\x0d\x1d\xe8\xd3\xb7\x9a\xbf\x59\x99\x6e\x3a\xb9\xeb\xf9\x21\xee\x25\x9d\x3b\xbf\x64\xe4\xb0\x63\x00\x11\xb9\x8d\x97\x5b\x42\x5e\xab\xdc\x77\x9c\x2b\xfe\x32\xb2\x7b\x67\x82\x2d\x68\x8c\xb4\x4d\xf0\x6c\xd1\x39\xa9\x97\x74\xdf\x70\xe9\x13\xb8\x49\xf5\x4c\x99\xac\xe9\x3d\xdf\xb8\xa0\x87\x49\x61\x65\xa4\x4a\x29\x68\x2e\xc3\x8f\x23\xed\x7c\xa0\x3f\x52\x6c\x84\x51\xe0\x73\x2a\x1b\xba\xec\x6d\x96\x60\x3d\x9d\xcf\xf1\xba\xa7\xdc\xaa\x3f\x8e\x7f\x83\x96\x4a\x41\x3a\x3c\x5c\xee\x09\xc3\x6f\xd8\x8d\x05\x8f\x73\xb1\x1f\x5a\xae\x34\xb8\x14\x57\x73\x6f\x08\x99\xa5\x52\xd5\x0b\x71\xfe\xfa\x59\xdd\xc8\xc3\x16\x9c\x07\x3b\xa7\x8a\x74\x9c\x16\x50\x29\xa0\x7b\x8e\x50\xc8\x19\x6d\xf5\x2d\x35\x2e\x90\xc8\xd4\x31\x0d\xce\xd8\x8d\x4b\x86\x73\xf5\x92\x1a\xff\x7a\x60\x02\xe5\x60\x93\xe2\xfc\x71\xe0\x07\x4e\x88\x8f\x94\x87\x96\xf2\x30\x81\x30\x3a\x45\x76\x25\x64\xcd\x95\x1a\x6a\x2a\x8a\x58\xa5\x78\x62\xb2\xb9\xf7\xe4\xc6\x07\xfb\xc4\x77\x34\xab\xaf\x97\x6b\x82\x16\x8b\xa8\xab\x09\x41\x3b\x2a\xe1\xc8\x37\x7a\x97\x0e\x0f\x74\x81\x00\x6b\x4d\xc6\xc6\x1b\x9d\x76\x2f\x44\x5f\xed\xc6\x83\x37\x98\x1d\xf0\x5d\x27\xb0\xb9\x95\xa0\x8c\x4d\x11\x5d\xfb\x4b\x93\xad\x10\x1c\xd5\x3c\x03\x6e\x97\x1a\xc4\xfa\x61\x64\xc0\x6f\x08\xb1\x60\xd7\x9a\x78\xb4\xc1\xdb\x68\x0d\x92\x1a\xa9\xe6\x78\x56\x63\x3d\x6a\x22\x68\xcd\xfd\xe5\x40\xc1\x4c\x48\xe9\x9e\x78\xf2\x76\x27\xaa\x11\x4f\xcb\x89\x1d\x41\x07\x5f\xe8\x7b\x2d\xcd\x2d\xcc\x19\xe7\xca\x1a\x25\xbf\xf1\x0f\x6b\x87\x0e\x36\xfc\xc3\x18\xbe\x8d\x80\xd9\x7c\x60\x02\xb4\x51\x40\xa6\x31\x5f\x03\x07\xbe\xe5\x3a\x8f\x1c\xf9\x06\x76\x01\x2b\x75\x7a\x78\x3b\x50\xb9\x8e\x8e\xfb\x2d\x05\xc3\x67\xe4\x11\xbb\x36\x44\xf0\x94\x96\x12\x1e\x17\x0e\xdc\x0e\x16\x96\x90\xca\x59\xf7\x9c\x10\x63\x9f\x49\x02\xaf\x07\x41\x1e\xd5\x64\x8d\x5f\x29\x10\xea\x08\x54\x68\xdf\xe9\x11\xcc\x55\x62\xe2\x61\x5c\x77\x64\x3c\x59\x23\x84\x51\x32\x11\xb9\xa7\x1a\xb2\xb9\x33\x61\x4f\x5d\x7e\xfb\x90\x4f\xf3\xa8\xb6\xe0\x56\x6b\xcc\x76\x98\xdc\xe9\x45\x29\x28\xe7\x8d\x60\x7d\xc8\x27\x8d\x96\xd4\x2d\x2d\x5d\x92\xd9\x49\x12\x30\x12\x77\xac\xdc\x92\xbb\xba\xa6\xf8\xbc\xd9\xb2\x55\x64\x18\x57\x24\x24\xe6\xb4\x43\x43\x9c\x9e\xc0\x4e\x28\x02\x56\xe5\xd3\x78\xff\x38\x5f\xc2\xac\xaf\x9c\x24\x7e\x62\x89\x94\x65\xf7\x05\x34\x95\x7a\xce\x51\x6e\xd0\x1d\xf7\x3d\x7d\x68\xba\x63\x38\x38\x9f\x24\xaf\xf0\x6d\x01\xab\xa4\xa0\x41\xc5\x25\x0e\x0e\x96\x3c\xbc\x58\x9d\x79\xaa\x44\xb0\xe5\x72\x46\x6d\x3a\x2e\x69\x0f\xe1\xc9\xc2\xd0\xdc\xee\xdc\x79\x94\x7c\x47\x57\xdf\x7e\xe3\xdf\x99\x12\x1d\xbf\x56\xc9\x23\x3b\x03\x2b\xde\xcb\x58\x81\xce\xa3\x75\xab\xb4\xe7\xf4\xf1\xe5\xa9\x6c\x59\x1e\xae\x74\x3b\xec\xbb\xe2\x51\x7c\x3d\x77\x6a\x99\xe7\x91\x48\x7d\xa1\x7c\x4c\x50\xa9\xd4\x6a\x74\x52\xbf\xe1\x7e\x08\x4b\x74\x7f\xe3\x29\x20\xa4\xd6\x90\x1b\x6e\xe8\xe8\x46\x0b\xd2\xc9\x1c\x45\xcf\xbc\x78\xd8\x20\x3d\xbd\x91\xe6\x52\x20\xc9\xae\x19\xd9\x60\x8f\xdd\xf8\xb6\xa9\xf6\x5d\x5b\x18\xff\xd2\x15\x5b\x37\xd7\x9a\xea\xb4\x87\x6d\x7f\xca\x54\x92\x8e\x65\x6f\x02\x0d\x3a\x55\xb8\x04\xbc\x81\x75\xeb\x06\x4a\x99\x57\x8c\xa8\xbb\x53\x8a\x93\x4c\xcc\xb9\x24\x03\xd9\xa6\x54\x39\x62\x7d\x7b\x40\xd5\x7f\x42\x16\xbf\xc8\xb1\x53\x56\x4b\xfe\x7b\x1e\xf6\x39\x80\xec\xa2\x34\xe1\x8a\xd6\xca\xac\xf5\xf5\x8d\x0d\x55\xc0\xe9\x84\x73\xb5\x84\x05\x7d\xe0\x4d\xdb\x91\x93\x19\x7c\x46\xca\xca\xb2\x4b\x8d\x5c\xdb\xb6\x63\xe6\x28\xdc\x32\x01\xe2\xe0\xab\x0f\xe8\xf4\x04\x56\x2d\x25\x37\xfc\x0b\x6c\x2c\xe8\x05\x99\x43\x67\xec\x30\x1e\x78\xdf\xd8\x11\xc4\x4a\x63\x8c\x15\x65\x47\xb0\x79\x0e\xf2\x8c\x29\xa1\x9e\x3c\x94\xa5\x0c\xdc\x7e\x7a\xf0\x78\x67\x7a\xec\x16\xde\x1f\x3b\xda\x06\x7a\x31\x74\x7b\x46\x9e\x72\xd6\xf8\x2e\xa3\x38\x4e\x6d\x12\x44\x98\x26\xea\xe1\xa6\xa5\xe2\x0a\x08\x4a\x3e\x94\x79\x65\xce\xf7\x5c\x61\x61\xac\x04\x3d\x67\xb4\xe8\xc2\x49\x42\x1c\x6d\x24\x54\xa0\x20\xc2\x36\x91\x0f\x5e\x53\x71\x59\x76\x05\xda\xa7\x75\x93\x13\xb9\x48\xbd\x24\xbb\x3b\x7b\x7d\x42\xee\xc4\x66\x2c\xa5\xc1\x67\x74\x5f\xfa\x57\xa1\xf7\x99\x53\x3d\x2b\xa2\x13\xa0\x14\x77\x75\xd9\x65\x73\x80\xa5\xdd\xc7\xe6\xd8\x7f\x9d\x4a\x2d\xdb\xf1\x30\xf9\x15\x84\x58\xa5\x96\x94\xa1\x9e\xd2\x0b\xcb\x8a\xde\xe7\x41\xc2\xed\x9e\xd5\x97\x2a\x31\x52\x32\x49\x92\x0f\xa6\x34\x1f\x3a\x9b\xb4\x2a\x53\xa0\x2f\xaa\xb0\xca\xef\x04\xb1\x24\xbb\x35\x76\x60\x5e\x85\x8a\xd8\xa4\xed\x28\xdd\x5f\x46\x2e\x78\x47\xf3\x89\x1f\xfa\x40\xad\x31\x8e\xdb\x1b\x27\x6d\x85\x6d\x0a\x76\x21\xd1\x2f\x33\xd8\x86\x25\xa4\x85\xb6\xad\x8f\x28\x52\xbe\xbb\xf1\xdc\x09\x29\x0d\xd7\xc2\xd5\xa2\xdf\xec\xe8\xa1\x4c\x48\x48\xd3\xf1\x98\xcb\x4b\x89\x43\xcc\x7a\x51\xee\xd4\x21\xbf\x68\x60\xa2\xf3\xb2\xc3\xeb\x73\xc7\x6d\xbd\xc2\x2f\x54\x6c\x5e\xdf\x3e\x56\x26\x47\xbf\x4e\x37\xc2\x04\xb1\xb9\x3e\x77\x7a\x75\x32\xe4\xb9\xc7\x0e\xef\x0c\x65\x4d\x3b\x2f\xfb\xc4\x59\xf3\x78\x20\xd2\x66\x50\x76\x11\x4b\xbf\x29\xe7\x16\x27\x68\xfc\x98\xc5\xac\x72\xcd\x48\xad\xe4\x43\x16\xd9\xfe\x5a\xfe\x03\x41\x3c\x3f\xfa\x70\x38\xa6\x36\x2f\xac\x77\xd6\x32\x67\xde\x87\xd3\xa2\xa8\xde\x3c\xc2\x87\x32\xbc\x56\xe9\xe3\x70\xc4\xb4\x88\x16\xd6\x25\xa0\x12\x36\x6c\x53\x56\x6f\xae\x06\x5b\x36\x3d\xe7\x72\xb1\xb0\xc6\xdf\x47\x0b\xe2\x99\xfb\xf8\xd6\x97\x9f\xb5\x39\x0d\xba\x91\x6e\xdf\x25\x46\x9f\x2e\xf1\xb1\xe5\x79\xbb\xa0\x02\x9f\x67\x4c\x49\x72\xee\x82\xf8\x3f\xd8\x15\x19\x4d\x06\xbc\x98\x6e\x46\x81\x73\x99\xfe\x25\xbd\x71\x8d\xaf\x0a\xb5\xda\xee\xb4\xdd\xd3\xa2\x7e\xfc\x2a\xbf\x31\x4e\xab\xea\xe3\x1b\xe7\x2e\x82\xf1\x1f\x2b\xef\xfb\x2d\xdf\xf9\xdf\x20\xb5\x01\x6a\xdb\xe1\x34\x37\x69\x6b\x6f\xc6\x9e\xd2\x97\xb3\x5a\xe0\x96\xb7\x1e\xdc\x8c\x92\xb9\xac\x35\x77\x3e\x2e\x4b\xa5\x8d\x99\x69\x28\x36\xec\xc3\xc5\x1f\x2f\xae\xd5\x3f\xff\xff\x37\x00\x00\xff\xff\x8f\xba\xf8\xf2\x1e\x10\x00\x00")

func dataIngredient_densitiesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataIngredient_densitiesJson,
		"data/ingredient_densities.json",
	)
}

func dataIngredient_densitiesJson() (*asset, error) {
	bytes, err := dataIngredient_densitiesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ingredient_densities.json", size: 4126, mode: os.FileMode(436), modTime: time.Unix(1523087669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTop_5kTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x57\xcd\x9a\xeb\x2a\x0e\xdc\xeb\x29\x58\x9d\xe5\xcc\xd9\xcc\x37\xcf\x23\x63\xc5\xd0\x06\xc4\x91\x20\x39\xee\xa7\xbf\x1f\x7f\x4e\xfa\xae\xba\xed\x10\x10\xa5\x52\x55\x45\x31\x14\xd0\x7a\xa0\xc0\x56\x4b\x21\x81\x03\x25\x78\x0b\x2f\x6c\x0f\x1c\xfc\x93\x0c\xfb\x00\xd1\x87\x13\x1e\x81\xab\x00\x27\xcf\x09\x32\xe5\x4c\xf3\x41\x61\x0b\x68\x4f\x33\xdf\x6d\xc2\xaf\x64\xc6\xae\x74\x1c\x0a\xd6\xa7\x84\x91\x13\x6c\x78\xfa\x74\x98\xcc\xaf\x9d\x04\x02\x45\x4e\xe6\xab\x7a\x4b\x10\xb1\x7c\xb3\x89\x84\x01\x0a\x47\x2c\x4c\x0a\x4f\x4c\x3e\x04\x84\x8c\xa2\x81\xae\xf5\x6d\xe5\x1d\x41\xb9\x8a\xb1\x42\x18\xe1\x49\x07\x15\xdc\xc2\x28\xd4\x52\x20\xb9\xe0\xf0\xe9\x58\x47\x40\x5f\x67\xac\x23\x52\x02\x8b\x22\x5c\x14\xac\xa3\x7d\x47\x59\xaf\x37\xa2\x07\x64\x2e\xe3\xe8\xb6\x93\xe3\x44\x17\xa4\x5a\x22\x1d\x30\x57\x29\x5f\x46\xb1\xf6\x82\x2f\x4e\x09\x7d\xdb\xd1\x79\x7b\x52\x32\x9b\x70\x71\xc0\x42\x07\x26\x06\x5b\xa3\x4f\x50\xdc\x15\x69\x82\xba\xee\xdd\x40\x37\x98\xf6\x85\x57\xac\xea\x84\x39\x36\xa0\x02\xa6\x22\x0c\x1b\xaa\x0f\x90\xc9\x62\x03\x17\x2d\x27\x70\x84\xcf\x6b\x5e\xf9\x7d\x22\xa1\x16\x85\x17\x8b\x25\x2d\x24\xea\xbc\xd0\xac\x30\x63\x16\x7f\x22\x58\xc7\x96\x03\x96\xbb\x50\x78\x61\x48\xb5\x28\xec\x28\xa7\xf9\xf1\x71\xf0\xab\x48\x0c\x91\xd3\xae\x10\x7c\xa4\xd9\xa3\x8c\x12\x49\x31\x2d\xc8\xb2\x4f\x84\x39\x07\x02\x69\x1f\xb3\x60\x3a\xd6\xda\x43\x88\xd2\xba\xa0\xa0\x57\x9f\x14\x2c\x5b\x4e\xb5\x80\xc5\x8b\x52\xa2\xf5\xf1\xa8\xc5\x7f\x71\x32\xb1\x6a\x41\xd9\xc1\xb2\xa4\xf6\x9f\x75\x10\xbf\x51\x28\x04\xbc\x1b\xd5\x79\xda\xf9\xf8\xf4\x89\x1a\xc9\x7a\x11\x0a\x42\x37\xa4\x83\x43\x13\x88\x86\xd2\x6e\xac\xd4\xb8\x29\x30\x16\x05\xcd\x3e\xa1\x75\xa0\x8e\xa5\x50\xf2\xe9\xf8\xf8\xb2\x79\x04\x3c\x49\x41\x1d\x86\xd0\x98\x32\x37\xcb\xa8\x85\xfa\xba\x8d\x42\x58\x27\x35\x7c\x40\x9d\xf8\x98\x41\x29\x72\xf0\x09\xe1\xbb\x5a\xeb\x7c\xf2\xa0\x45\xf0\xb5\x91\x88\x6f\xf5\xb1\x52\x44\xb9\xc0\x62\xe2\x80\x9d\xae\x03\xa7\x35\x45\x98\x30\xa1\x82\x5a\x0c\xa1\xbf\xb1\x81\x9f\xa4\x70\xc3\x32\xfb\xae\x85\xed\xd9\x9e\xda\x87\x2f\xe7\x73\x6e\x83\x31\xb8\xd1\x6f\x0b\x11\x73\x20\xa3\x97\xd4\x3c\x1b\xd3\x31\x35\x63\x84\xfb\xbf\x13\xdf\x0d\x83\x62\xf4\xd6\x2c\x34\x77\xb9\xcc\xcb\xf9\x42\xe6\xe5\x53\xff\x9a\xc7\xd4\x28\xb1\xe1\x65\x02\xe1\x03\x4e\x2a\xd6\xd5\x0c\x17\x1f\x55\x4a\x87\xa4\x2d\xbd\x77\xc0\x27\x5b\xdc\x19\x94\x14\xe3\x1c\x4b\xdc\x36\x3c\x68\xed\xd1\xea\xde\x84\xad\xe5\xe0\xdf\xf3\xf0\x43\x45\x7e\x72\xbc\x73\x07\xe7\xf0\x8e\xf1\x58\xfb\x74\xf0\x16\x6d\x6d\xb5\x35\x6e\x24\x90\x09\x53\x2d\x66\xaa\x1a\x86\xa0\xb9\xf1\xb2\x5d\xee\x46\x53\x30\xad\xde\x44\x9f\x0a\x38\x8c\xb3\x21\x9f\x1d\xde\x42\xa5\xb5\xac\x6b\x4f\x26\x54\xb0\x55\xe4\xba\x4f\x65\x49\x8b\xdd\xa6\x53\x33\x50\x29\x8d\x7b\x03\xc8\xb9\xd3\xc4\x43\x89\x76\x85\xcc\x72\x42\xa9\x12\x49\xbc\x85\x46\x2e\x84\xdd\x87\x00\x17\x85\xc0\xaf\xc1\x09\xf8\x68\x44\x83\x79\xbc\xfc\xc2\x80\x99\x12\x9b\x3e\xb1\xa4\x53\xe0\xf8\x61\x96\x94\x18\xe5\x9a\x61\xa3\x26\x1f\x63\x92\x67\xe7\xe7\x03\xfd\x2d\x82\xb6\x4c\xdd\x1e\xeb\xa6\x48\x75\x4b\x18\xe8\x35\x41\xda\x49\xee\xbe\x8e\x62\xd6\x53\x44\x39\x50\x5a\x65\x0b\xb3\xb6\xcb\x20\x61\xe4\x80\xaa\xad\x32\x4e\x0f\xb2\xc5\x73\x22\xd1\xe9\x09\xb9\xc6\x7c\xfa\x37\x60\x8d\x1f\x63\x52\x4b\x95\x93\x2e\xb8\x7a\xc7\xbb\xf9\xe8\xe4\x6a\x27\xb2\x36\x06\x35\xad\xb9\x6b\x10\xd4\xbc\x7a\xd3\x14\x7c\x6a\x70\x67\xd4\xaf\x5b\x7e\xbc\xe5\x52\x6e\x01\xd1\x46\xf8\x39\xd4\x63\x5a\xa6\x34\x68\x16\xbc\x6e\x0d\x5e\xf4\x9a\xee\xb3\x1e\xbb\xd6\x98\x9f\xb8\x58\xcc\x24\xad\x80\x37\x69\x0e\x0a\x58\x7c\x9a\xd0\xac\x3e\x0d\xb8\xe7\xc5\x1e\xf4\x51\xd3\xcb\xab\xde\x0e\xe5\xa8\x71\xeb\xf6\xc1\xe1\x4a\xf3\xcf\x1a\xdb\x31\xd4\x0d\x1e\x0e\x6d\x5c\xf3\x9b\x04\x05\xa5\xe0\x20\x65\x37\xd4\x5b\xa7\xa7\x36\xfb\x82\xc1\x63\x32\x4a\xa8\xdc\xc5\xaf\x9f\xd8\x89\x84\x35\xf8\x47\xe0\x17\xc9\x07\xf5\x3e\x09\x90\x33\xed\x53\x69\x86\xec\xf6\xc6\xa1\x66\x14\x3c\xaa\x0e\xc3\x5b\x60\x69\xa7\x5b\xab\xb1\x3b\xf7\x10\x82\xae\xfd\x23\x4b\x98\xc2\x52\x9a\xc7\x37\x2f\x2a\xa4\x10\x88\x4e\x85\x5c\xa5\x55\x3b\xc8\xfe\xa1\x90\x7d\x4a\xd7\xde\xbb\x90\x6a\x2b\x5e\x4f\x1f\xc7\xd0\x31\x96\x7e\xe1\x88\xe9\x60\x38\x04\x5d\xb3\x7d\x41\x7b\x92\x2c\xfd\x7f\x78\x75\xcb\x20\x87\x44\xb4\xaa\x96\x84\x41\x67\xca\x41\x1f\x5c\xc1\xbd\xaf\x18\xf6\xfb\x2f\xad\x2d\x35\xe1\x80\xa1\x11\xb8\xd3\x73\x86\x16\xd3\x58\x3a\xcd\x7a\xde\x7e\xd0\x8b\x8e\x23\x37\x82\x41\x0e\x35\xbe\x7b\x5c\x50\x04\x0f\x6e\x81\x41\x6a\xab\xcc\x3a\x52\x38\x18\xcb\x2a\xa5\x75\xee\xf4\x7b\xa2\x6b\x4d\x5a\x73\xe2\xd5\xf3\xdb\x19\xda\xdc\xaf\x87\xe2\xfc\xe1\x9a\x7f\x3d\xea\x18\xa3\x37\xdc\x7d\x49\x17\xb2\x77\x7c\x1a\xb3\x33\x02\x54\x17\xa9\x65\x81\xc3\x86\xe0\xc7\x19\x9a\xf1\x70\x54\x8a\x9f\x31\x2e\x13\x85\x1f\x31\xb0\x5b\x38\x84\xe3\x3f\xb3\x77\x53\xd6\x2c\x9e\x64\xa2\xff\x3b\xcd\xae\x69\xee\x56\xa5\x65\x35\x8b\xb2\x63\xe4\x08\x0f\x21\x75\xe6\x33\x1d\x5a\x2c\x5a\x73\x17\xef\xa1\x0d\x9b\x60\xda\xaf\xd1\x1e\x70\x2c\x4a\x82\xbb\x57\x07\x4f\xde\x4f\x04\x7d\x11\x15\x73\xa7\xb9\x8d\xba\x46\x3f\x1e\xb4\xe2\x43\xeb\xbb\xfe\xa9\xa8\x0e\x1c\x86\x87\xf9\x65\xda\x9f\x49\xf9\x51\xaf\x46\x3e\x5b\x26\x98\x29\xea\x73\x80\xda\x38\xb7\xf8\x43\x46\x1d\x85\xb0\x04\xcd\xf4\x37\xdd\x66\x7a\xf1\x9f\xd8\x0e\xc7\xa6\xe3\x30\x89\x79\x0f\x1f\xf6\xd7\x84\x59\xa8\x68\x1f\x53\xd3\x55\x77\x94\xbf\x72\x36\x8a\xce\x48\x2d\x33\x85\x75\x3d\x9a\x29\xe5\x9d\x5b\x14\xfe\x54\x9f\x18\xc1\x71\x59\x51\x66\xca\xea\x4c\x43\x3c\x31\xd4\x2e\x30\xdd\xd8\x16\xbb\x7e\xff\xff\xbf\xbf\xff\x07\x28\xf5\xa8\x01\xfb\xa2\x8f\x91\x90\x64\x4e\x92\x44\x41\xfb\xde\x63\xd3\xcf\x84\xa7\x23\xed\x0e\xd2\x6c\x28\x1b\xd9\xba\x62\x28\x4a\xf1\xd6\xf1\x49\xc6\x11\x4a\x0b\xab\xed\xa7\x45\x3b\x57\x4b\xbf\xed\x68\xb4\xf8\xb4\xcf\x04\x3a\x8b\xc6\x0d\xd5\xde\x19\xae\x89\xfb\x00\x71\xe6\xcc\x4e\xb8\x88\xa2\x2e\x36\x92\xbe\x14\x4e\x0c\xcb\x70\x47\x08\xfa\x80\xff\x1d\xf4\xb0\x1b\xee\x3b\xc5\x36\xcf\x35\xaf\x56\xf8\x43\xaa\x2f\x73\x83\x0e\xb5\xc3\x6f\x1a\x49\xd9\x0a\x6e\x91\xb0\xf4\xa6\x5b\xa9\x8d\x82\xd4\x9a\x36\xfd\xb4\xcb\x4f\x44\xf9\x62\x69\x11\x0c\xb7\xcb\xac\x8c\xf9\x53\x86\x14\xb2\xb0\x5a\x5f\x4b\x61\xe8\x1a\x51\xb7\xee\x05\x29\xd1\xfa\xe9\x33\x59\x46\x4f\xcc\x2c\x58\x68\x6e\xbf\xe2\xf7\x3d\x49\x4b\xdf\x6f\x1d\x1f\xde\x7d\xa0\x60\x34\x11\xdb\x70\xc0\x21\x5c\xef\x5f\x1a\xff\x04\x00\x00\xff\xff\xc5\x78\x8c\x17\xee\x0d\x00\x00")

func dataTop_5kTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataTop_5kTxt,
		"data/top_5k.txt",
	)
}

func dataTop_5kTxt() (*asset, error) {
	bytes, err := dataTop_5kTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/top_5k.txt", size: 3566, mode: os.FileMode(436), modTime: time.Unix(1523090876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ingredient_corpus.txt":     dataIngredient_corpusTxt,
	"data/ingredient_densities.json": dataIngredient_densitiesJson,
	"data/top_5k.txt":                dataTop_5kTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ingredient_corpus.txt":     &bintree{dataIngredient_corpusTxt, map[string]*bintree{}},
		"ingredient_densities.json": &bintree{dataIngredient_densitiesJson, map[string]*bintree{}},
		"top_5k.txt":                &bintree{dataTop_5kTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

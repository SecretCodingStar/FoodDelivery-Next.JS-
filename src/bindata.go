// Code generated by go-bindata.
// sources:
// data/ingredient_corpus.txt
// data/ingredient_densities.json
// data/top_5k.txt
// DO NOT EDIT!

package meanrecipe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIngredient_corpusTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x56\xcd\xb2\xf4\xaa\x0d\xdc\x53\xc5\x3b\xb0\xca\x2e\x49\xe5\x3f\x79\x1c\x19\x6b\x6c\x3e\x03\xa2\x24\x98\xb9\x73\x9f\x3e\x25\x7e\x3c\x73\xee\xe6\xd4\xb1\x47\x16\x4d\xab\xd5\x92\x3f\xa9\x14\xdc\x9d\xc4\xe0\x71\x77\x7b\xff\xeb\x5b\x75\x1e\x72\xd6\xf7\x35\xf8\x4b\x1c\x3d\xfa\xcb\x90\x2b\xb9\x12\xd0\xa3\x58\xd3\xb2\x40\xac\x3d\xbc\xb8\x8a\x20\x85\x28\x3b\x69\x07\xb0\x7b\x44\x6a\xec\xf0\x38\xdc\x13\x72\x88\x11\x1c\x1e\x78\x88\x2b\x21\xfb\xd3\x9a\x1d\xe4\x74\x11\xf8\x40\xe7\x09\x58\xd0\x3d\x42\x46\x27\xe1\xa1\xf9\x36\xa6\x0b\xf3\x9f\x5b\x71\x7a\x80\xab\x52\x5c\xdd\xa4\x38\x6b\x28\x44\x47\xa5\x06\xca\x10\x1d\xfe\x56\x19\x7c\x75\x1b\x64\xc8\xe0\x12\xc8\x89\xfb\xcc\x2a\x09\x62\x74\x10\xa3\x35\x9a\x39\xbe\xad\xc1\x27\x14\x62\xd0\x03\x52\x88\x97\x35\x09\x15\xbd\xde\xe3\xc5\xa0\x24\x58\xa3\xe7\x59\xd3\xaf\x60\xcd\xd6\x6a\x45\xb6\xe6\x00\x8e\xc1\x5b\xf3\x82\xfe\x48\x31\x3c\xd1\x51\x88\xd6\x8c\x3c\xfd\xae\xd6\x50\x0e\x94\xad\x29\x58\x0a\xae\x47\xb1\x66\x8b\xe0\x2f\xb7\xde\x6e\x4c\xaf\xc9\x91\x35\x78\x1c\x62\x8d\x0f\x39\x43\xd2\x4f\x37\xb8\x42\x3e\x5c\xa1\xd7\xae\xb1\x11\x13\x65\xf7\xab\x05\x8f\xd6\x54\x4a\x50\x49\x69\x9f\x84\x5a\x53\x80\x25\xe2\xfb\xfe\x4e\x68\x07\x6b\x44\x89\xf7\x8c\x90\xac\x79\xe2\x81\x15\xb6\x38\xe1\x7a\x8c\xc8\x6f\x6b\x8e\x90\x8f\xfb\x00\x6b\x7a\xb0\xf3\x27\xa2\xa0\x35\x1e\x98\xa9\x2a\xae\x13\xf7\x1d\xf8\xfe\x61\x43\x7c\x58\x53\xa8\x4e\x1c\x3d\xe5\x49\x59\x11\xe4\x56\x13\x1e\xfd\x9b\x1e\x2b\xf4\x76\x02\x4d\x81\x27\x78\x53\xce\x10\x7a\xee\x33\xf8\x0b\xb3\x16\xb8\x9e\xd6\x10\xe3\x01\x99\xac\xf1\x2d\x85\x6c\x4d\x3d\xdf\x09\x17\xdf\x37\x0d\x5d\x03\x90\xf7\x9b\xc3\xd4\xe4\x64\xa2\xd4\xb9\x8b\x90\x2b\x93\x72\x20\x8a\xa7\xa0\x87\xce\x3a\x78\xbd\xda\x89\xf0\x7c\x2f\x36\x3e\xa7\x23\x88\xde\xf0\x45\xec\x51\x2a\xb2\x9c\x81\x71\x01\x2e\x50\x38\x5c\xa0\xf1\xe4\x29\x42\xfd\x00\x57\x0d\xc4\xdc\x06\x3b\x21\x86\x1b\x23\xc4\x44\x79\x17\x6b\x62\x48\xb8\x4a\x56\x80\x13\x0a\xe4\x9b\xc1\x12\x32\x42\x29\x11\xad\xe1\x1e\x41\x0c\xf9\xb8\xe3\x0f\x46\xcc\xf7\x2d\x19\x82\x04\xbd\x8a\x27\x4f\xb9\x55\xad\xcc\x1b\x73\xc6\x3b\x62\x00\xd9\xc3\x2f\xca\x2e\x35\xa9\xc0\xbb\x46\x73\xd6\x7f\xb5\xcb\xd2\xef\xc0\xa8\xbd\x77\x97\xb0\x2b\x7a\xa8\xf6\x19\x32\x76\x15\x76\x44\x62\x0d\xe3\x87\xe2\xa1\xb6\xc5\x88\x12\xb6\x3b\xcf\x2d\x6d\x5a\x77\xd0\x63\xa5\x84\x0c\x7a\x88\x9c\xc4\x15\x73\xc8\xc7\x77\x0a\xf7\x88\x70\x69\x56\x39\x21\xc6\xae\xa7\x99\xb3\x80\x28\xa3\x1a\xba\x61\x8c\xf7\x91\xca\x9c\x86\x73\x48\xc5\x1a\xc1\x44\x31\x64\xb0\xe6\xf7\xe6\xfd\x19\x72\xb0\x46\x2a\xc3\x6b\x43\xe6\xd0\xe1\x92\x60\x02\x95\xb3\x87\x4c\x11\x86\xc4\x07\x87\x77\xef\x75\x67\x50\x14\x1e\x62\x1c\xef\x7c\xa4\xa7\x7e\xff\x61\x6c\xca\x42\x2a\xf9\xab\x3f\xf6\xdf\x5f\x67\x28\x45\xdb\x6a\xaa\xa7\x93\xa0\x72\x2e\x11\x9d\xbc\xb9\x95\x55\xbf\x41\xba\x5b\xac\x6f\x10\x05\x52\xf0\xee\x66\x78\xe7\xb7\x7b\x9d\xa1\xa2\x7b\x85\x3c\xc2\x03\xe4\x2e\x9c\x0d\xde\x2e\x22\x3c\xac\xb9\xb0\xfa\x53\x93\xbe\xe9\x68\x5c\x07\x43\x1a\xff\xc9\x03\x4f\xf2\xb0\x93\xb2\x23\x90\x56\x53\xc3\xb6\x81\x82\x98\xa9\x3a\xf8\x8d\xc9\x7b\x8a\xe1\xab\x7b\x7e\xfa\xd0\xcf\x5e\x18\x22\x83\xd5\xfc\xb3\x9b\xee\x6c\x9d\xce\x5b\xeb\xbe\xf9\x96\x36\xfd\xaf\x20\xe4\x56\xdd\xf2\x49\x88\x51\x4a\x57\xb2\x5e\xf8\xc3\x2f\x43\xbe\xab\x96\x42\xae\xd6\x9c\x4a\xe8\x28\xd5\x0f\x0d\x6c\xb1\xe1\x1d\x3a\xec\xac\xa0\xd6\xcf\x37\xe6\xf7\x07\x01\x71\xbe\xfb\x62\x9a\x79\xc4\x5a\xbb\x58\x07\xd1\x2b\xe3\x64\x4a\x10\xb5\x3b\x0b\xf1\x65\x4d\x6d\x9c\x90\xd5\xd1\x55\x8b\xa0\x2d\xa4\x73\xe2\x8d\x31\xd2\xcb\x4d\x1b\xff\xae\x97\x56\x62\xbe\xfe\x05\x11\x0a\x66\x72\xbd\xff\x15\xe6\x70\x4f\x7a\xb8\x65\x4b\x4e\x48\xcb\xb8\x61\x37\xa2\xe1\x0c\x6b\x56\xad\x71\x30\x7f\x9c\x4e\x37\xa6\xce\x60\xb3\x9b\xda\x8e\xfc\xa9\xfa\x40\x72\x3f\x26\xe0\x03\xb8\xe3\x5a\x0c\xf6\x5c\x53\xa6\x89\x22\x88\x74\x60\x94\x1f\xe8\x75\x56\x22\xcb\x1a\x39\xa5\xa5\x72\x85\x2f\xf6\xba\x86\x66\x9f\xd7\xc6\x97\xba\xf9\x7b\x68\xa2\x0f\x3a\x59\xea\x1e\x8a\x97\x2e\x35\x75\xaf\x0f\x22\x06\x29\x77\xd5\x74\x4a\x2c\x7f\xef\xda\xfb\xd3\xc7\xd1\x82\xa7\x5a\x3f\x6e\x24\xda\x28\xcb\x17\x66\x83\x2d\x93\x91\xc2\xf0\xfe\xf8\xfb\x2d\xc5\x39\xf3\xee\xe7\x6e\x5e\xee\x0f\x8c\x79\x28\xc8\x1d\xcb\x97\xb6\x0e\x8c\x50\xf5\xe6\x83\xb5\xbb\x7e\xa3\x20\xeb\xae\x0f\xfc\x06\xf8\x0a\x22\x9f\xc1\x78\xa2\x8a\xf0\x33\x88\xc7\x28\x5c\x2e\xd0\x89\xa2\xa8\x8d\x5e\xbe\x54\x51\x81\x2b\x4c\xcd\x26\x84\xf8\x35\x05\x96\xef\x87\x0a\x31\x40\x76\x82\x20\x34\x8c\xb4\x9f\x35\xe4\x05\x2d\x86\x47\xa4\x17\xf2\xb7\x28\x7f\xc8\xa3\x2f\x70\xb3\xfe\xc3\xcd\x47\x3d\x41\x0a\x30\x1c\x4d\xe6\x68\xbd\x59\x93\xae\xca\x0e\xb8\x6f\x0e\xd3\x48\xfa\x78\x99\xfb\x8c\xab\xc4\x55\xf7\x0c\x1d\x31\x50\xf5\xab\x88\x78\xe9\xb5\x1b\x2b\xf8\xd9\x10\x5f\x86\x3b\xba\xfb\x3e\x64\x67\x14\xe9\xb7\x91\x2b\xa4\xd9\xa6\x04\x75\xb0\x90\x20\x1f\xa4\x9f\xc3\xa9\xcb\x07\x83\xbf\x90\xef\x19\xf3\x08\x72\xde\xf3\x78\xb8\x4c\xc7\xb8\x3c\x51\xa1\xd7\x0a\xba\x3e\x7e\xc4\x04\xfb\x08\x1a\x43\xff\x8f\xfe\x5d\x9b\x4e\x93\x39\x7e\x05\xda\x50\xf2\xda\x4e\x55\xd0\x6b\x4d\x98\xa4\x4c\x09\xe2\x71\x14\x15\xa1\x35\x25\xb6\xf4\x55\xfe\x0a\xcc\x70\x50\xdf\x5b\xb8\x75\x9c\xfe\xd4\x1f\x0e\x82\x7a\xe3\xea\x15\xbe\xc2\x9e\xf1\x7d\x77\xaa\xae\x04\x4b\x1f\xf7\xf4\xe9\xa6\xb1\x9e\xea\x19\x8e\xb3\xcf\xcc\x47\x9b\x0d\xf8\x55\x8f\x1e\x35\x8c\xf1\xb3\xe1\xcd\x9e\x1b\x3b\x5e\x37\xbc\x7b\xf8\xce\xa1\xf7\x35\xea\xfa\x61\x52\xe0\x38\xb1\xd6\xb0\x56\xcd\x82\x18\x7f\x2e\xac\x7d\x9b\xb0\x26\x1e\x7f\x59\x25\x9e\x2e\xe9\xe1\x42\x97\xc2\x6f\x6b\xc6\x5a\xf3\x37\x6b\xfe\x6e\xcd\x3f\xac\xf9\xa7\x35\xff\xb2\xe6\xdf\xd6\xfc\xc7\x9a\xff\x5a\xf3\x3f\x6b\xfe\xfa\xff\x00\x00\x00\xff\xff\x22\xd4\xdc\x66\x65\x0c\x00\x00")

func dataIngredient_corpusTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataIngredient_corpusTxt,
		"data/ingredient_corpus.txt",
	)
}

func dataIngredient_corpusTxt() (*asset, error) {
	bytes, err := dataIngredient_corpusTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ingredient_corpus.txt", size: 3173, mode: os.FileMode(438), modTime: time.Unix(1523134194, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIngredient_densitiesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x57\xd9\xae\xe3\x38\x0e\x7d\x6f\xa0\xff\xc1\xb8\xcf\x8d\xc0\x6b\xec\xd4\xdf\xd0\x36\x63\x6b\x22\x4b\x1e\x2d\x37\x48\x0d\xe6\xdf\x1b\xda\x28\xb9\xaa\x5e\x29\x8a\xe2\x72\x78\x48\xfd\xef\xef\xbf\xaa\xea\x6b\xb6\xc6\xa0\xfa\xfa\x51\xb5\xed\x78\xab\xff\x09\x32\x6e\xb1\x5a\x76\x44\x8d\x5f\x3f\xaa\xa6\x1b\xd2\x41\x96\xf5\xfd\x6d\x24\xd9\xba\x82\x2a\xf4\xc7\x07\xe9\x4b\x63\x60\x2b\x6c\xb5\xcd\xfd\xd6\xc5\x33\x85\x70\x14\x27\xdd\x98\x4e\x9e\x68\xa0\x30\x37\xd4\xc9\xdc\x09\xea\x40\x0d\xa2\x38\xac\xe9\x50\x31\xff\x5a\x61\xb1\xa7\x80\xf4\x9b\x69\x5d\x46\x34\x92\xf7\xce\x0b\x27\x9a\xc6\xdb\x14\x44\xef\x9d\x9d\x27\xae\x55\x3a\x1a\xe9\x09\x2d\xad\x22\xb1\x73\xb8\x0d\xf2\x55\xa1\xd6\x4c\x6c\xfe\xd1\xe1\xd6\x07\xe9\xc1\xf8\xcb\xe7\xb5\x4e\x81\x7d\xe3\x86\x06\x66\x8e\x95\x64\xdc\x67\xa3\xb9\x0d\xff\x14\x65\x48\x57\xfa\x22\xe3\x72\x91\x1c\x4c\x48\x6c\x93\x5e\xfc\xc8\xcd\x2a\x13\x4d\x44\xbf\xf5\x8b\x1d\xd5\xef\x16\xbe\x41\x30\xce\xc1\xdf\x1f\x6e\x8f\x20\xc4\x6f\x38\xa5\x02\x83\x2b\xdd\x18\x5a\x2a\x3f\x68\xef\x5e\xf3\x68\x92\x68\x65\x9c\x57\x6f\xc4\xf5\xeb\x47\x35\x25\x23\x87\xd5\x06\xd4\xea\x6b\xd4\x51\x8e\x80\x7b\xbf\x1e\xd1\xd3\x85\xad\xa8\xaa\x6f\x26\x70\x03\x0f\xb3\x8e\xd0\x51\x0a\x27\x2a\x23\xae\xd5\x9b\x09\xfc\xf3\x95\x19\xb8\x86\x83\x2d\xe5\xe9\x40\xa1\xce\x88\x4f\x9f\x93\x36\xe5\x64\x86\x45\x0a\xef\xe0\x3d\x89\xf6\x50\xbd\xa1\x4e\x75\x5a\x76\xb6\xbc\xd0\x6b\x3d\xfa\x64\xca\x58\xf5\xc2\x8f\x53\xac\xef\xb7\x7b\x90\x6d\x0a\x51\x54\x33\x82\xd0\xb1\xae\x23\xbd\x6b\xb4\xbf\x3f\xa4\x57\x16\x50\x4a\x06\xe1\x38\x25\x03\xfa\x8d\x68\xaa\x53\x1a\x30\x12\x83\x0d\x7a\xb0\x90\x36\x53\xf6\x4d\x2a\xef\xd8\xbd\xbf\x35\x51\x0f\x41\x47\x2c\x44\x89\x3e\x99\x80\x65\xbf\xaa\x49\x30\x07\x82\xab\xe2\xbd\x4e\x18\x3b\xe0\x23\x85\x00\x16\xfb\xad\x26\xb7\x76\xa9\x0c\x8a\x08\xe0\x9a\xfa\x50\x03\x87\x35\x8a\x72\x93\xb9\xcb\xd3\x23\x01\x31\x02\x39\x5f\x3a\x11\x84\x35\x04\xf0\x7b\xa6\x82\x45\x96\x07\x54\x70\xc9\xd9\x37\xfe\xae\xaf\x51\xc3\x81\xbf\xab\xc3\xb7\x5c\x60\x95\x57\xe1\x02\x42\x72\x88\xca\x2e\x7d\x03\x45\x70\x84\xfa\x8f\x14\xc2\x01\x6a\x03\xc5\x84\x4f\x42\x3b\xa4\x1a\xe6\xde\xfc\x25\x1d\xc3\x2f\x11\x38\xe1\xbd\x49\x3d\xe0\x73\x44\x5e\x52\x35\x41\x9f\xa0\x60\xb3\xbe\xc8\x75\x4f\xc9\x91\xea\xe5\xd9\xf3\x5e\x40\xe7\x59\xcd\x4a\x9a\x3d\xba\x93\xda\x06\x39\xaa\x8f\x8f\x86\xc0\x1c\x81\x9a\xd5\xeb\x2e\xa9\xcf\x4a\x2e\x8b\xe4\xcc\x43\xbd\x4f\x85\x4d\x17\xb4\xb4\xa7\x27\x85\xe9\x4a\xbe\xf2\x59\x1d\x56\xef\x4a\xca\x23\xeb\x3c\x52\x68\xde\x35\x6d\xe4\x92\x08\x25\xde\x95\x82\xc5\x9e\x6a\xd3\x43\x01\xbc\x91\x32\xc6\x84\x2a\xc5\x0e\x6f\xb2\xae\x93\x9b\x46\x1e\x41\xcf\xa1\x8f\x6a\x64\x3d\xa6\xda\xa1\x49\xa8\x9f\x41\xcd\xb8\x58\xac\xe8\x6c\x7c\x5c\x4d\x90\xbb\xf5\x9d\x32\x96\x82\x25\x8f\x89\xb7\xdf\x10\x47\x5c\x4f\x09\x0b\xbd\x7c\xe2\x79\xfa\x93\xa6\x2b\x86\x8c\x36\x9e\x2d\x33\x16\x37\x50\x9c\x2d\x71\xec\x51\xe1\xad\x86\x2d\xcc\x42\x22\xf8\x34\xa0\x9c\xb4\xa5\x1a\x3b\x4a\xcb\x2f\xb5\x05\x5d\x05\x26\x69\xa6\x07\xb5\x68\x2c\x87\x8e\x0e\x4c\xbf\x82\xb3\x84\x4a\x47\x81\x73\x96\x53\x35\x10\x59\xbe\xa5\x5a\x50\x1b\x54\x7a\x67\xaa\x4c\x26\x79\xe0\x4b\x19\xe8\xe4\x9e\x5c\x80\xf3\xe4\x69\xc4\xdf\x2f\x3d\x4d\xab\x82\x83\x58\x9f\x9b\xc2\x65\x2b\x17\x6f\x97\xc2\x13\xe7\xf0\x28\xb8\xc8\xbd\x31\xd1\x34\x59\x98\x10\x10\x1a\x73\xe8\xd2\xbb\x0a\x98\x66\xc1\x99\x9e\x00\xf3\x54\x96\x99\x18\x6e\x1a\x73\x36\xf2\x7e\x4d\xa2\x03\x4e\xd7\xb7\x1f\xe5\x31\xd1\xb5\xb9\x29\xde\xa2\x4a\xfa\xcd\xbd\x4e\xb5\x3b\xed\x71\xbe\x98\xaf\x52\x47\x8c\x39\x83\x00\xe1\x0b\x9f\x3d\x3f\x40\xe9\xfd\x00\xce\xe5\xdb\x39\xd6\x3d\x52\xce\x3d\xaf\xac\xa1\x4a\x43\xd2\xf6\x99\xd3\xb1\x33\xda\x42\x56\xfd\xc7\x06\xde\x74\x00\x2c\xd3\x4c\x25\xe9\x69\x97\x08\x6e\x04\x2b\xb9\x5d\x77\x54\x8a\x85\x91\x51\x4f\xa4\xca\x2d\xce\xc5\x01\x95\x70\x51\x20\xf2\x41\xd3\x76\xc9\xce\x0a\x26\x88\xf2\x6a\x74\x32\x81\xa9\xe4\x6d\x47\xa0\xe2\x78\x04\x64\xb8\x61\x5a\x17\xb2\x22\x16\x62\x3b\xce\x0e\xfc\x93\x5c\x2a\x10\x1b\x26\x7c\x5d\x84\x59\x7d\xa0\xa5\xe6\x44\x58\xf6\x38\x17\x89\x85\x4e\x04\x15\x66\x2b\xcd\x2b\x72\xb9\x30\x92\xd7\x40\xd0\x67\x11\xfb\xf8\x20\xdc\x9c\x0a\x3e\xd7\xb5\xf0\x00\xb1\xc9\xe8\x43\x14\xbd\xd8\x2a\xf0\x43\x43\xde\x6d\x04\x89\x4c\x61\x9e\x63\xc3\x37\x6d\x2a\xf9\x02\x96\xb3\x27\x97\xef\xd0\x17\x3d\xd5\x7d\x91\x8a\x81\x58\x83\x38\x13\x49\xc1\x3a\x3a\xee\x3d\xa9\x66\x76\xb1\xc7\x1c\xcd\xd0\x92\x8c\xdb\x76\x72\x10\xc6\xaf\xba\x94\xd7\x8d\x89\xcd\x6b\x3e\xc8\xf2\x0b\x42\xd3\x36\x63\xae\x16\xbe\xdc\x1b\xb9\xdb\x39\x1a\x13\xf0\xd6\x13\x9d\xea\x05\x38\x4f\x24\x90\x97\xe9\xe0\x28\xd1\xc3\xd8\x14\x2b\xb8\xe6\xbe\xbf\x3b\x9a\x4b\x3f\xed\xb2\xec\x4c\xb0\x98\xaf\x3e\xe5\x1b\xb6\x1d\x8d\x09\x33\x89\xe8\x21\xf0\x77\x2c\xce\x98\x92\x1b\x59\x3d\x63\xa8\xb9\x12\xb5\xe7\xb8\x00\x8d\x3e\xd3\xc8\xce\xbe\xbd\x8c\x58\x5d\xef\xae\x57\xc3\xda\x95\x29\xca\xaf\x62\xde\x8b\x3c\xcb\xc1\xe8\x38\xef\x28\xe6\x27\x0a\x81\x6e\x8e\x4f\x94\xc3\x1d\x8e\xd9\xaa\x2d\x0e\x8f\x3c\xdd\x95\xdd\xac\x5f\xa9\xdb\xba\x70\xc6\x57\xa0\x1b\x2f\xed\xe2\x73\x72\xcf\x60\xa6\x29\x40\xc6\x9e\x5c\x5a\x2f\x6a\x3a\x1a\x9d\x61\xf7\xd1\x88\x81\x62\xf2\xcb\xc2\x86\xe0\x06\x6a\x86\xb4\x57\xa5\x35\xbe\x23\x16\xd8\xe1\x27\xf2\x74\xa1\x9e\xae\x0b\x9a\x8e\x1f\xbb\x29\x09\x97\x08\xf8\xfa\xc2\x0c\x55\xa1\x4a\xc3\x34\x19\x7d\x90\x2c\xd0\x61\xf9\xf9\x48\xa8\x96\xcf\x27\x62\xdc\x3d\xf2\xca\xa3\xe2\xff\xe9\x42\x09\x51\x36\x5e\xe7\x7c\x62\xc8\x66\x4c\x3d\x67\x6c\xa0\xe9\xfe\x9e\xff\xab\xb0\xbc\x2e\x3d\x3b\x14\x3b\x41\xda\x98\x1f\x44\x83\x5a\x7e\xb2\xe1\x4c\xc9\x46\x3e\xed\x95\x4c\xde\x3b\x33\x6e\xe6\xa2\xdf\x83\x33\x28\xbd\xa4\x5a\x94\x3d\xe6\x30\x03\xa8\x40\x49\xb7\xe9\x29\xb7\x9b\x82\xdd\xfd\x74\x15\x2c\xaf\xd0\xf6\x53\x9f\x7f\x94\xab\x9f\x9e\x63\xf2\xe1\x64\xe8\xec\x6a\x8f\xd7\x96\x46\xf9\x86\x1c\x4c\x98\x58\x39\xeb\xa1\x57\xdc\xcf\xb5\xcb\x3c\xec\x55\x68\x31\x3e\x24\x07\xad\x43\x93\xe4\x7c\xbb\x5f\x45\x45\xb8\x6b\xbb\xf2\xb7\x11\x7f\x0d\xc5\x07\xff\x83\x6e\xfe\x55\x97\x43\x4a\xa5\x93\xba\x5f\x60\xf8\x7f\xb4\xf4\xf0\x7f\x2d\x13\x12\x62\x93\x0f\xe5\x3c\x8e\x5f\x88\x66\xec\x53\x36\x43\x96\x49\xde\xd2\x8a\x85\x87\xe4\x2c\x14\xbb\x26\xaa\xc0\x6d\xab\x84\x94\x6b\x1c\xb5\x0d\x99\xd1\xee\x6f\x98\xea\xf7\xf7\x5f\xff\xff\x37\x00\x00\xff\xff\x22\xe3\x9b\xfa\xe0\x10\x00\x00")

func dataIngredient_densitiesJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataIngredient_densitiesJson,
		"data/ingredient_densities.json",
	)
}

func dataIngredient_densitiesJson() (*asset, error) {
	bytes, err := dataIngredient_densitiesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/ingredient_densities.json", size: 4320, mode: os.FileMode(438), modTime: time.Unix(1523134194, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTop_5kTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x57\xcb\xb2\xec\x28\x0e\xdc\x13\xc1\x3f\xb0\xea\xed\xf4\x66\x62\xbe\x47\xc6\x2a\x9b\x6b\x5e\x2d\xc1\xa9\xae\xfb\xf5\x13\xe2\x65\xd7\x5d\x9d\x53\x55\x18\x44\x2a\x95\x99\x66\xf0\x45\x2b\xae\x07\x90\x56\x5b\x2d\x05\x49\xab\x03\xc8\x3b\xab\xd5\x1b\xda\xc7\xe4\xdd\x0f\x9a\xe4\xbc\x56\xc1\xf9\x4b\xab\x97\x4f\x55\xbe\x8f\x2e\x45\xad\x32\xe6\x8c\xf3\x23\x6b\xb5\x79\xb0\x97\x99\xdf\x6e\x94\xde\xd1\x8c\x03\xf0\x38\x58\x2b\xeb\x62\x84\x20\x8f\x6e\x70\xb9\x78\x98\x9c\xde\xbb\xac\xf5\x18\x52\x34\xbf\xaa\xb3\xa8\x55\x80\xf2\x3b\x99\x80\xe0\xb5\x2a\x29\x40\x49\xc8\x5a\xfd\x40\x74\xde\x83\x56\x19\x88\x3d\x7e\xd6\x1e\x9c\x76\xd0\x8a\x53\x25\x63\x09\x21\x68\xf5\x83\x07\x16\xd8\xfc\x28\xdd\xa2\x47\xfa\x68\x75\xb8\x78\xac\xc3\xb4\x6a\x8b\x8d\x3d\x11\x19\xb5\xb2\x40\x94\x8a\xd4\x78\xe2\xbe\x03\xad\x1f\x36\xc4\x97\x56\x39\x95\x51\x47\xdb\xf2\x4c\x51\x2a\x88\xb5\x04\x3c\xda\x33\x6d\x2d\xa7\x8f\x61\xa8\xfd\x12\x9f\x14\x23\xb8\xb6\xf7\xe9\xec\x85\xd1\x6c\x94\xca\xa9\x55\x22\x3c\x20\x26\xad\x6c\x0d\x2e\x6a\x55\xce\x4f\xc0\x89\xfd\x82\x44\xfa\x63\x20\xee\x0b\xcf\x50\xf9\xa4\x94\x42\xc3\xd1\x43\x2c\x94\x04\x03\x96\x7a\x32\x5a\x68\x1d\x00\x2b\x57\x3b\x11\x7e\x3e\x13\x8d\xfb\x74\x04\x96\x1b\xbe\x13\x59\xe4\x82\xc4\xa7\x23\x9c\x05\x67\xc8\xe4\x2e\x90\xf5\xc9\x26\x0f\xe5\x2e\x5c\xf8\xe0\x63\x95\x67\x77\xa0\xcb\x7c\xaf\xf0\x6e\xd5\x0c\x3e\xa4\xb8\xb3\x56\xde\x05\x9c\xed\xcc\x40\x01\x19\xe2\x42\x34\xbb\x88\x90\xb3\x47\xad\xa8\xad\x48\x04\xf1\x58\xeb\x0f\x42\x8c\xeb\xd6\x04\x8e\x9d\x5c\xcd\x26\x9b\x62\x2d\xd2\xa9\x0f\xc6\x88\x6b\xc5\x28\xcc\xfd\x4a\xd1\x84\xca\x05\x68\x97\xd5\x14\xe5\x5f\x7b\x6a\x15\x7e\x03\xa1\xf7\x70\xb7\xb4\xb1\xbd\x33\xfa\xc7\x45\x6c\x0c\x6d\x15\xb1\x56\x84\x37\xe4\x9d\x7d\x13\x21\x01\x70\x37\x96\x6a\xd8\x84\x07\x20\xc7\x72\x76\x11\xe4\x10\x3e\x13\x15\x8c\x2e\x1e\xcf\x2d\xcc\xcb\xc3\x25\xbb\xf2\x09\xde\x37\x7e\x8d\x3d\x33\xb0\xe0\x27\x4b\x37\xf4\x7e\x1d\x29\xc8\xc9\x72\x72\x21\x6b\xc5\x18\x92\x77\x11\xb4\xfa\x5d\xad\x3d\x5d\x74\x5a\x71\x21\x78\x6f\x48\xe4\x5a\xb9\x89\x31\x80\xd0\xdb\x42\x4c\x1e\x3a\xe5\x3b\x86\x6b\x2e\x21\x42\x04\xa9\xc2\x82\xf7\xfd\x3b\xeb\xd3\x8f\x3c\x7f\x23\x36\x68\xc2\x25\xd9\xab\x7d\x6c\xbf\xbf\x4f\x97\xb3\x8c\xd9\x60\x53\x03\x41\xe8\x9d\x3d\x1a\xfe\x50\xcd\xb3\x7f\x1d\x74\x33\x24\xa2\xfd\x3f\x3b\xb0\x81\x67\x08\xce\x9a\x85\xf6\x4e\x1f\xf3\x3e\x5d\x41\xf3\x76\xb1\x3f\xea\x20\x36\x12\x6d\xf0\x31\x1e\xe1\xa5\xd5\x85\xc5\x9e\x72\xc0\x27\x1d\x95\x4a\x47\x4b\xd6\xdf\xfb\xc0\x4f\xb2\xb0\x27\x41\x8a\x21\xcc\x81\x87\x6d\x03\x29\x68\x6c\xd5\x2e\xb2\x51\xb2\x36\x79\xf7\x98\xac\x6f\xbd\xfa\x9e\x93\x4e\x38\x98\xc2\x30\x26\x6d\xed\xd6\xa0\x5d\xbc\xb7\xd5\xd6\xb0\xc9\x7f\x19\x21\xd6\x62\xa6\x9e\x82\xf7\x9c\x1b\xab\xe5\xc2\x37\xd6\x04\x71\x75\x30\xb8\x58\xb4\x3a\x05\xdc\xde\xb6\x2f\x3e\x6c\xbe\xe2\x5a\xda\xa5\x2e\xa3\xf4\xd2\x56\xa2\xcf\x5d\x41\xa2\xb8\x66\xc4\x74\x6a\x7b\x2c\xa5\x11\xb7\x03\x3d\x77\x1c\x48\x31\xa2\x4c\x6a\x4e\x74\x69\x55\x2a\x05\x24\x51\x7e\xe1\x25\xc8\x38\x79\xaf\xd5\x07\xbd\x4f\x6f\x33\xe4\xfe\xd9\x2f\xe9\xc4\xf8\xfa\x17\x78\xc8\x18\x93\x69\x5a\x20\x65\x76\x65\x4d\x2f\x33\x25\xcb\x70\x92\x36\x6e\xd8\x44\xaa\xab\xc4\x24\xca\xf8\x84\xff\x16\x02\x5b\xa6\x89\x8c\xa5\x43\x13\xbb\x57\x75\x6c\x9b\xfc\xed\x48\x37\x07\x7a\x5d\xeb\x63\x00\x3a\x80\x5a\x95\x13\xcf\xb6\xd7\x20\x70\x48\x1e\x98\x5b\x99\x29\xbe\xd0\x16\x97\x22\x12\x4f\xa3\xca\x35\xe4\xcb\x3d\xb0\x6c\x8c\x1a\x0a\x50\x2a\x5d\xa2\xfb\x9f\xce\x90\x66\x8f\x3c\xb9\xde\x67\x81\x1b\xf1\x44\xd7\xee\x8a\x08\x38\xaf\x1e\x8a\x9f\x4c\x27\x68\x4c\xfc\xeb\xd6\x3a\x67\x53\x29\xb7\x4e\xb1\x8c\xcd\x54\x8c\x31\x7a\x53\x7e\x38\x13\x7c\x6e\x27\x58\xc4\x1c\xee\xb8\x3e\x37\x59\x33\x7f\x20\x66\x21\x23\xb5\x5a\x1e\x4c\x3b\xd0\x43\x91\x9b\x77\xd4\x56\x37\x7b\x43\xe6\x5d\x5f\xf8\x2c\xf0\xed\x98\x6f\x0b\x3d\x51\x28\x79\x5b\x76\x37\xcd\xf9\x77\xa9\x41\x97\x8b\x86\x5b\xf2\xa2\x02\xf9\x41\x99\x02\x54\x60\x10\xba\x47\x80\x65\x17\xd3\x20\x5c\x01\xef\x20\x1a\x46\xe0\xd4\x15\xb7\x1d\xdd\xb9\x07\xd5\xbb\x97\x4f\x6f\xa4\x27\x63\xbf\xd8\x92\x33\xee\x53\xcf\xba\xec\xf7\xf6\x02\x67\x20\x38\x2a\x0f\x4f\x5e\x20\x72\x23\x69\x2b\xb8\x45\x8e\xa1\x32\xcd\x87\x46\x28\x32\x25\x51\x91\x80\xd2\x4c\xb2\xc8\x53\x1e\xf1\x12\x14\x2a\x49\xf1\x63\x5a\x1e\xca\xdc\x47\x7f\x1d\xb2\x13\x32\xb7\xdb\xf0\xe5\xc2\x98\xe1\x00\xf1\x48\xf2\x14\x9c\x12\x56\x08\xec\x85\xb4\x3c\xe8\xe5\xf8\x5c\xfe\xdd\x95\xa7\x95\x36\x75\x52\x2a\x2e\x05\x0e\x7c\x52\x0a\xf6\xbe\xa8\x87\x84\x3f\xf5\xbd\x54\x71\x9b\x61\xcf\x0c\xb5\xf3\x79\x84\x2f\x23\xb4\x9e\xb1\x62\x60\x31\x88\x88\xc7\x91\x85\x8a\x5a\x65\x5f\xc3\x83\x04\x05\x88\xe0\x48\x2d\xe7\x50\x6d\x75\xda\x53\x7e\x38\x12\x94\x55\x57\x6b\xec\xe5\xf6\x88\x9f\x35\xaf\x12\x19\x26\x2d\x96\x3b\x35\x21\x99\x9f\xca\xe9\x8e\xb3\x79\xea\xab\x8e\x31\x7c\xb4\xa1\xad\xea\x62\x79\x27\xc2\x31\x79\x3d\x13\x36\x11\x5c\xe6\x3c\x4c\xf1\x61\x85\xed\x30\xce\x70\x9c\x58\x8a\x9b\x31\x35\x23\xfa\xef\xb0\xdb\xd2\xc6\xcc\xc3\x5d\xcf\x87\x74\x5a\xb8\xd0\x04\xf7\xef\x34\xe1\x26\xf4\x5b\xa5\x16\x44\x2d\xd0\x0e\x21\x05\xad\x5e\x84\x7c\x9a\xaf\x14\x6c\xa1\xb0\x1c\x2f\xc6\x31\xf4\x66\x23\x88\xfb\x67\x34\x51\x42\x28\x31\x12\xec\x8e\x4f\xad\x7e\xd2\x2e\xe1\x8d\xdf\x88\xc5\xdc\x69\x75\xc3\xee\x0e\xaf\x17\xae\xe0\x23\x34\xe1\x7f\x2a\xc8\x63\x27\xf8\x97\xf9\xcb\xc8\x9f\x39\x2e\x83\x9b\x1c\xd2\x25\x39\x66\xc6\xc2\xaf\x11\x14\x71\x68\x49\x0e\x0d\x9f\x28\x56\x31\x74\xd3\xb4\xaf\xba\xe5\xb5\xeb\x7c\x81\x3f\xb2\x05\x1e\x87\x89\x29\xed\xfe\xe9\xcb\xe2\x07\x84\x22\xef\x32\xf0\xa6\x2b\x7d\xbf\xce\x7a\xdd\x00\xe2\xf9\x5e\x41\x33\x5b\x36\xb5\x9b\x31\xeb\x4e\x5e\xac\xd5\x3f\xd5\x45\x71\xf0\x33\x95\x19\xc7\xa6\x8e\x8f\x5c\x97\x26\xc0\xdc\xa4\xab\xbb\xed\xe2\xe4\xdf\xff\xfb\xcf\xdf\xff\xd5\x0a\xa8\x1e\x55\x5e\x3c\x64\xe1\x73\xb2\x28\x9a\x0b\x29\xa2\xe7\x7e\xc6\xd8\xfc\x99\x5f\x79\x84\xfc\x41\xb4\x0d\x68\x43\x5b\x57\xe6\x06\x2a\xce\x9e\xe9\x42\x73\x22\x50\xcb\xe6\xf2\xe2\x25\x15\x70\xe9\x08\x74\x4e\x90\x8b\xfb\x0c\xdb\xf3\x0e\xb0\x01\xdb\x3b\x9c\x8a\xad\x0c\x7c\x47\x9e\xee\x3c\x0d\x40\x7c\x06\x21\xf8\x9b\xb5\xba\xc0\xaf\x40\x30\xa2\xdc\xa3\x3d\x8f\x0c\x0b\x2d\x0f\x3c\x52\xbb\x24\x02\xf3\x6e\xd7\x78\x51\x75\x65\xee\xd2\x1b\x71\xc2\x6f\x1c\xaf\x08\x96\x60\x0b\x08\xa5\xd3\xc3\x52\x6d\xd4\xc5\xd6\xda\x61\xf6\x53\xdb\xe8\x57\xa2\x16\x2a\x61\xfb\x98\x15\xa5\xbf\xc5\x4e\x08\x41\x89\xad\xab\x45\xbc\xa4\x29\x50\xdd\xba\x15\xc5\x88\xeb\x1d\x71\x52\x13\x7f\x20\x27\x82\x82\xf3\x98\xf9\xfe\x71\xcf\xe4\xb2\x96\xe5\x20\x23\x61\x1c\x40\x10\x4c\x00\x19\x30\xa9\x23\xd5\xf5\xfe\xf5\xff\x00\x00\x00\xff\xff\x7e\xb5\x18\x14\x2f\x0f\x00\x00")

func dataTop_5kTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataTop_5kTxt,
		"data/top_5k.txt",
	)
}

func dataTop_5kTxt() (*asset, error) {
	bytes, err := dataTop_5kTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/top_5k.txt", size: 3887, mode: os.FileMode(438), modTime: time.Unix(1523163459, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/ingredient_corpus.txt": dataIngredient_corpusTxt,
	"data/ingredient_densities.json": dataIngredient_densitiesJson,
	"data/top_5k.txt": dataTop_5kTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"ingredient_corpus.txt": &bintree{dataIngredient_corpusTxt, map[string]*bintree{}},
		"ingredient_densities.json": &bintree{dataIngredient_densitiesJson, map[string]*bintree{}},
		"top_5k.txt": &bintree{dataTop_5kTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

